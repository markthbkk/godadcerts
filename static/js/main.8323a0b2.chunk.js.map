{"version":3,"sources":["components/Certs/CertDate.js","components/Certs/CertItems.js","components/Certs/Certs.js","components/Certs/CertForm.js","App.js","index.js"],"names":["CertDate","props","month","date","toLocaleString","day","year","getFullYear","className","CertItem","console","log","subjectName","subStart","subEnd","certExpiry","Certs","items","map","cert","Date","subscriptionStartDate","subscriptionEndDate","certificateExpiryDate","_id","CertForm","useState","showCertForm","setShowCertForm","setSubjectName","subStartDate","setSubStartDate","subEndDate","setSubEndDate","certExpiryDate","setCertExpiryDate","postData","data","axios","post","headers","Accept","axiosResponse","id","status","submitHandler","handleChange","type","onClick","Form","Field","placeholder","onChange","e","target","value","spellCheck","Button","App","SSLCerts","setSSLCerts","readCertsDB","get","certDataJSON","GODADDY_CERTS_SORTED_ASC","sort","objA","objB","Number","useEffect","src","alt","prevArray","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8323a0b2.chunk.js","sourcesContent":["import \"./CertDate.css\";\n\nconst CertDate = (props) => {\n  // console.log(props)\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n  const year = props.date.getFullYear();\n\n  return (\n    <div className=\"cert-date\">\n      <div className=\"cert-date__day\">{day}</div>\n      <div className=\"cert-date__month\">{month}</div>\n      <div className=\"cert-date__year\">{year}</div>\n    </div>\n  );\n};\n\nexport default CertDate;\n","import CertDate from \"./CertDate\";\nimport \"./CertItems.css\";\n\nconst CertItem = (props) => {\n  console.log(props)\n  return (\n    <div className=\"cert-item-wrapper\" >\n      <div className=\"Cert-item__subjectName\">{props.subjectName}</div>\n      <div className=\"cert-item\">\n        <h2>Subscription Started</h2>\n        <CertDate date={props.subStart} />\n      </div>\n      <div className=\"cert-item\">\n        <h2>Subscription Ends</h2>\n        <CertDate date={props.subEnd} />\n      </div>\n      <div className=\"cert-item\">\n        <h2>Certificate Expires</h2>\n        <CertDate date={props.certExpiry} />\n      </div>\n    </div>\n  );\n};\n\nexport default CertItem;\n","import CertItem from \"./CertItems\";\n\nimport \"./Certs.css\";\n\nconst Certs = (props) => {\n   console.log(props);\n  return (\n    <div>\n      \n      <div className=\"infoText2\">\n        <p>Sorted by Certificate Expiry</p>\n      </div>\n      {props.items.map((cert) => (\n       \n        <CertItem\n          subjectName={cert.subjectName}\n          subStart={new Date(cert.subscriptionStartDate)}\n          subEnd={new Date(cert.subscriptionEndDate)}\n          certExpiry={new Date(cert.certificateExpiryDate)}\n          key={cert._id}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Certs;\n","import { useState } from \"react\";\r\nimport \"./CertForm.css\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function CertForm(props) {\r\n  const [showCertForm, setShowCertForm] = useState(false);\r\n  const [subjectName, setSubjectName] = useState(\"\");\r\n  const [subStartDate, setSubStartDate] = useState(\"\");\r\n  const [subEndDate, setSubEndDate] = useState(\"\");\r\n  const [certExpiryDate, setCertExpiryDate] = useState(\"\");\r\n\r\n  const postData = async () => {\r\n    const data = {\r\n      subjectName: subjectName,\r\n      subscriptionStartDate: subStartDate,\r\n      subscriptionEndDate: subEndDate,\r\n      certificateExpiryDate: certExpiryDate,\r\n    };\r\n\r\n    \r\n   \r\n    const axiosResponse = await axios.post(\r\n      `https://certsapi.onrender.com/api/v1/certs`,\r\n      data,\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json;charset=UTF-8\",\r\n        },\r\n      }\r\n    );\r\n\r\n    console.log(axiosResponse.data)\r\n\r\n    data.id = axiosResponse.data.id\r\n\r\n    console.log(data)\r\n\r\n    if (axiosResponse.status === 200) {\r\n      props.submitHandler(data);\r\n\r\n      handleChange()\r\n    };\r\n  };\r\n\r\n  const handleChange = () => {\r\n    return setShowCertForm(!showCertForm);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"certFormToggle\">\r\n        <button type=\"submit\" onClick={() => handleChange()}>\r\n          Add\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        {showCertForm ? (\r\n          <div className=\"formLayout\">\r\n            <Form className=\"create-form\">\r\n              <Form.Field>\r\n                <div className=\"label\">\r\n                  <label>Subject Name</label>\r\n                  <input\r\n                    placeholder=\"Subject Name\"\r\n                    onChange={(e) => setSubjectName(e.target.value)}\r\n                    spellCheck=\"false\"\r\n                  />\r\n                </div>\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <div className=\"label\">\r\n                  <label>Subscription Start Date</label>\r\n                  <input\r\n                    placeholder=\"YYYY-MM-DD\"\r\n                    onChange={(e) => setSubStartDate(e.target.value)}\r\n                  />\r\n                </div>\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <div className=\"label\">\r\n                  <label>Subscription End Date</label>\r\n                  <input\r\n                    placeholder=\"YYYY-MM-DD\"\r\n                    onChange={(e) => setSubEndDate(e.target.value)}\r\n                  />\r\n                </div>\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <div className=\"label\">\r\n                  <label>Certificate Expiry Date</label>\r\n                  <input\r\n                    placeholder=\"YYYY-MM-DD\"\r\n                    onChange={(e) => setCertExpiryDate(e.target.value)}\r\n                  />\r\n                </div>\r\n              </Form.Field>\r\n              <div className=\"submitButtonWrapper\">\r\n                <Button\r\n                  className=\"submitButton\"\r\n                  onClick={postData}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Certs from \"./components/Certs/Certs\";\nimport CertForm from \"./components/Certs/CertForm\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n\nconst App = () => {\n  const [SSLCerts, setSSLCerts] = useState([]);\n\n  const readCertsDB = async function () {\n    \n    const certDataJSON = await axios.get(\n      `https://certsapi.onrender.com/api/v1/certs`\n    );\n\n    console.log(certDataJSON.data)\n\n    const GODADDY_CERTS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) =>\n        Number(new Date(objA.certificateExpiryDate)) -\n        Number(new Date(objB.certificateExpiryDate))\n    );\n\n    // console.log(certDataJSON.status);\n    \n    if (certDataJSON.status === 200) { setSSLCerts(GODADDY_CERTS_SORTED_ASC) };\n\n    \n    \n  };\n\n  const addCertHandler = (cert) => { setSSLCerts((prevArray) => { return [cert, ...prevArray].sort(\n      (objA, objB) =>\n        Number(new Date(objA.certificateExpiryDate)) -\n        Number(new Date(objB.certificateExpiryDate))\n    ); }) };\n\n  useEffect(() => {\n    readCertsDB();\n    \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"AppFrame\">\n      <div className=\"infoText1\">\n        <div>\n          <img src=\"GoDaddyLogo.jpg\" alt=\"GoDaddy Logo\"></img>\n        </div>\n        <h2>SSL Certificates</h2>\n      </div>\n      <CertForm submitHandler={addCertHandler}></CertForm>\n      <Certs items={SSLCerts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}